from aiogram import Bot, F, Router, types, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from db import DB_PATH, get_user, add_user, get_purchases_count, get_cart_items, remove_from_cart
from config import ADMIN_ID, CHANNEL_ID, CHAT_ID, CHANNEL_INVITE, CHAT_INVITE
from payments import send_payment_request, check_invoice
import aiosqlite
import logging


router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    MAIN_MENU = State()

class CartStates(StatesGroup):
    VIEW = State()
    SELECT_ITEM = State()

class AdminStates(StatesGroup):
    MAIN = State()
    ADD_PRODUCT_NAME = State()
    ADD_PRODUCT_DESC = State()
    ADD_PRODUCT_PRICE = State()
    ADD_PRODUCT_CATEGORY = State()
    ADD_PRODUCT_SUBCATEGORY = State()
    ADD_PRODUCT_FILE = State()
    ADD_PROMOCODE_CODE = State()
    ADD_PROMOCODE_DISCOUNT = State()
    ADD_PROMOCODE_MAX_USES = State()


class CatalogStates(StatesGroup):
    CATEGORY = State()
    SUBCATEGORY = State()
    PRODUCT = State()

class TopUpStates(StatesGroup):
    ENTER_AMOUNT = State()

def get_main_menu(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    kb = [
        [KeyboardButton(text="–¢–æ–≤–∞—Ä—ã"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")]
    ]
    if is_admin:
        kb.append([KeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_subscription_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_INVITE)],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç", url=CHAT_INVITE)],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

async def check_subscription(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç"""
    try:
        channel_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        chat_member = await bot.get_chat_member(CHAT_ID, user_id)
        return channel_member.status != "left" and chat_member.status != "left"
    except Exception as e:
        logging.error(f"Error checking subscription: {e}")
        return False

@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if await check_subscription(bot, user_id):
        is_admin = user_id == ADMIN_ID
        await callback.message.edit_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu(is_admin)
        )
        await state.set_state(UserStates.MAIN_MENU)
        await callback.answer()
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_INVITE)],
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç", url=CHAT_INVITE)],
            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        await callback.answer(
            "–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            show_alert=True
        )
        await callback.message.edit_text(
            "–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
            reply_markup=kb
        )

@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: CallbackQuery, bot: Bot, state: FSMContext):
    is_admin = callback.from_user.id == ADMIN_ID
    await callback.message.delete()
    await callback.message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—â–Ω—ã–π —à–æ–ø –æ—Ç DROPZONE! üöÄ",
        reply_markup=get_main_menu(is_admin)
    )
    await state.set_state(UserStates.MAIN_MENU)
    await callback.answer()

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    if not await check_subscription(bot, user_id):
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    ref_id = None
    if len(message.text.split()) > 1 and message.text.split()[1].startswith("ref_"):
        ref_id = int(message.text.split()[1].replace("ref_", ""))
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                "INSERT OR IGNORE INTO referrals (user_id, ref_user_id) VALUES (?, ?)",
                (user_id, ref_id)
            )
            await db.commit()
    
    if not await get_user(user_id):
        await add_user(user_id, ref_id)
    
    is_admin = user_id == ADMIN_ID
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—â–Ω—ã–π —à–æ–ø –æ—Ç DROPZONE! üöÄ",
        reply_markup=get_main_menu(is_admin)
    )
    await state.set_state(UserStates.MAIN_MENU)

@router.message(Command("catalog"))
@router.message(F.text == "–¢–æ–≤–∞—Ä—ã")
async def products_command(message: Message, bot: Bot, state: FSMContext):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT DISTINCT category FROM products")
        categories = [row[0] for row in await cursor.fetchall()]
    
    if not categories:
        is_admin = message.from_user.id == ADMIN_ID
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.", reply_markup=get_main_menu(is_admin))
        return
    
    kb_buttons = [[InlineKeyboardButton(text=cat, callback_data=f"category_{cat}")] for cat in categories]
    kb_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    await message.answer("–ö–∞—Ç–∞–ª–æ–≥:", reply_markup=kb)
    await state.set_state(CatalogStates.CATEGORY)

async def show_categories(message: Message, bot: Bot, state: FSMContext):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT DISTINCT category FROM products")
        categories = [row[0] for row in await cursor.fetchall()]
    
    if not categories:
        is_admin = message.from_user.id == ADMIN_ID
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.", reply_markup=get_main_menu(is_admin))
        return
    
    kb_buttons = [[InlineKeyboardButton(text=cat, callback_data=f"category_{cat}")] for cat in categories]
    kb_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    await message.answer("–ö–∞—Ç–∞–ª–æ–≥:", reply_markup=kb)
    await state.set_state(CatalogStates.CATEGORY)

@router.callback_query(F.data.startswith("category_"))
async def show_subcategories(callback: CallbackQuery, bot: Bot, state: FSMContext):
    category = callback.data.split("_")[1]
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT DISTINCT subcategory FROM products WHERE category = ?", (category,))
        subcategories = [row[0] for row in await cursor.fetchall() if row[0]]
    
    if not subcategories:
        await show_products(callback, bot, state, category)
        return
    
    kb_buttons = [[InlineKeyboardButton(text=subcat, callback_data=f"subcategory_{category}_{subcat}")] for subcat in subcategories]
    kb_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_catalog")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    await callback.message.edit_text(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ {category}:", reply_markup=kb)
    await state.set_state(CatalogStates.SUBCATEGORY)

async def show_products(callback: CallbackQuery, bot: Bot, state: FSMContext, category: str, subcategory: str = None):
    async with aiosqlite.connect(DB_PATH) as db:
        if subcategory:
            cursor = await db.execute("SELECT id, name, price FROM products WHERE category = ? AND subcategory = ?", (category, subcategory,))
        else:
            cursor = await db.execute("SELECT id, name, price FROM products WHERE category = ?", (category,))
        products = await cursor.fetchall()
    
    user = await get_user(callback.from_user.id)
    discount = user['discount'] if user else 0
    
    text = f"–ü—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}{f' ({subcategory})' if subcategory else ''}:\n\n"
    kb_buttons = []
    for product in products:
        product_id, name, price = product
        final_price = price * (1 - discount / 100)
        kb_buttons.append([InlineKeyboardButton(text=f"{name} {final_price}$", callback_data=f"product_{product_id}")])
    
    kb_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"back_to_subcategory_{category}_{subcategory}" if subcategory else "back_to_catalog")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    await callback.message.edit_text(text, reply_markup=kb)
    await state.set_state(CatalogStates.PRODUCT)

@router.callback_query(F.data.startswith("product_"))
async def show_product_card(callback: CallbackQuery, bot: Bot, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT name, desc, price, category, subcategory FROM products WHERE id = ?", (product_id,))
        product = await cursor.fetchone()
    
    if product:
        name, desc, price, category, subcategory = product
        user = await get_user(callback.from_user.id)
        discount = user['discount'] if user else 0
        final_price = price * (1 - discount / 100)
        text = f"*{name}*\n\n{desc}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n" + \
               (f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}\n" if subcategory else "") + \
               f"–¶–µ–Ω–∞: {final_price}$"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"buy_product_{product_id}")],
            [InlineKeyboardButton(text="–í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"back_to_subcategory_{category}_{subcategory}" if subcategory else f"back_to_category_{category}")]
        ])
        await callback.message.edit_text(text, reply_markup=kb)
        await state.update_data(category=category, subcategory=subcategory)
        await state.set_state(CatalogStates.PRODUCT)
    else:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@router.callback_query(F.data.startswith("back_to_subcategory_"))
async def back_to_subcategory(callback: CallbackQuery, bot: Bot, state: FSMContext):
    data = callback.data.split("_")[3:]
    category, subcategory = data[0], data[1]
    await callback.message.delete()
    await show_products(callback, bot, state, category, subcategory)

@router.callback_query(F.data.startswith("back_to_category_"))
async def back_to_category(callback: CallbackQuery, bot: Bot, state: FSMContext):
    category = callback.data.split("_")[-1]
    await callback.message.delete()
    await show_subcategories(callback, bot, state)

@router.callback_query(F.data == "back_to_catalog")
async def back_to_catalog(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.delete()
    await show_categories(callback.message, bot, state)

@router.message(Command("profile"))
@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_command(message: Message, bot: Bot):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    user = await get_user(message.from_user.id)
    if not user:
        is_admin = message.from_user.id == ADMIN_ID
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu(is_admin))
        return
    
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    ref_link = f"t.me/{(await bot.get_me()).username}?start=ref_{message.from_user.id}"
    purchases_count = await get_purchases_count(message.from_user.id)
    is_admin = message.from_user.id == ADMIN_ID
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="top_up")],
        [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promocode")],
        [InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")],
        [InlineKeyboardButton(text="–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals_list")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await message.answer(
        f"*–ü—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"–ò–º—è: @{username}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['balance']}$\n"
        f"–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {user['discount']}% (–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Å–∫–∏–¥–∫–∏)\n"
        f"–ü–æ–∫—É–ø–æ–∫: {purchases_count}\n\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user['referrals_count']}\n"
        f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö: {user['earnings']}$",
        reply_markup=kb
    )

@router.message(Command("cart"))
@router.message(F.text == "–ö–æ—Ä–∑–∏–Ω–∞")
async def cart_command(message: Message, bot: Bot, state: FSMContext):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    cart_items = await get_cart_items(message.from_user.id)
    if not cart_items:
        is_admin = message.from_user.id == ADMIN_ID
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_menu(is_admin))
        return
    
    text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    kb_buttons = []
    user = await get_user(message.from_user.id)
    discount = user['discount'] if user else 0
    for item in cart_items:
        product_id, name, price = item
        final_price = price * (1 - discount / 100)
        text += f"{name} = {final_price}$\n"
        total += final_price
        kb_buttons.append([
            InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_item_{product_id}"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_item_{product_id}")
        ])
    
    text += f"\n–ò—Ç–æ–≥–æ: {total}$"
    kb_buttons.extend([
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –≤—Å—é", callback_data="pay_all")],
        [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é", callback_data="clear_cart")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    await message.answer(text, reply_markup=kb)
    await state.set_state(CartStates.VIEW)

@router.callback_query(F.data == "top_up")
async def top_up(callback: CallbackQuery, bot: Bot, state: FSMContext):
    if not await check_subscription(bot, callback.from_user.id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.delete()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ $:")
    await state.set_state(TopUpStates.ENTER_AMOUNT)

@router.message(TopUpStates.ENTER_AMOUNT)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        user_id = message.from_user.id
        invoice_id = await send_payment_request(message.bot, user_id, 0, amount)
        if invoice_id:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=f"https://t.me/CryptoBot?start=inv_{invoice_id}")]
            ])
            is_admin = user_id == ADMIN_ID
            await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:", reply_markup=kb)
            await message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å.", reply_markup=get_main_menu(is_admin))
        else:
            is_admin = user_id == ADMIN_ID
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.", reply_markup=get_main_menu(is_admin))
        await state.clear()
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")

@router.callback_query(F.data.startswith("buy_product_"))
async def buy_product(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    product_id = int(callback.data.split("_")[2])
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id, price, name FROM products WHERE id = ?", (product_id,))
        product = await cursor.fetchone()
        if product:
            product_id, amount_usd, name = product
            user = await get_user(user_id)
            discount = user['discount'] if user else 0
            amount_usd = amount_usd * (1 - discount / 100)
            invoice_id = await send_payment_request(bot, user_id, product_id, amount_usd)
            if invoice_id:
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=f"https://t.me/CryptoBot?start=inv_{invoice_id}")]
                ])
                await callback.message.edit_text(
                    f"–û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä *{name}* –∑–∞ {amount_usd}$:",
                    reply_markup=kb
                )
                await callback.answer("–ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ.")
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@router.callback_query(F.data.startswith("pay_item_"))
async def pay_item(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    product_id = int(callback.data.split("_")[2])
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id, price, name FROM products WHERE id = ?", (product_id,))
        product = await cursor.fetchone()
        if product:
            product_id, amount_usd, name = product
            user = await get_user(user_id)
            discount = user['discount'] if user else 0
            amount_usd = amount_usd * (1 - discount / 100)
            invoice_id = await send_payment_request(bot, user_id, product_id, amount_usd)
            if invoice_id:
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=f"https://t.me/CryptoBot?start=inv_{invoice_id}")]
                ])
                await callback.message.edit_text(
                    f"–û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä *{name}* –∑–∞ {amount_usd}$:",
                    reply_markup=kb
                )
                await callback.answer("–ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ.")
                await remove_from_cart(user_id, product_id)
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    product_id = int(callback.data.split("_")[2])
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR REPLACE INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)",
            (user_id, product_id, 1)
        )
        await db.commit()
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)

@router.callback_query(F.data.startswith("delete_item_"))
async def delete_item(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    product_id = int(callback.data.split("_")[2])
    await remove_from_cart(user_id, product_id)
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!", show_alert=True)
    await cart_command(callback.message, bot, state)

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
        await db.commit()
    is_admin = user_id == ADMIN_ID
    await callback.message.delete()
    await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", reply_markup=get_main_menu(is_admin))
    await state.set_state(UserStates.MAIN_MENU)

@router.message(Command("help"))
@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def support_command(message: Message, bot: Bot):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º", url="t.me/+your_admin_chat")],
        [InlineKeyboardButton(text="FAQ", callback_data="faq")]
    ])
    await message.answer("–ö–∞–∫ –º–æ–∂–µ–º –ø–æ–º–æ—á—å?", reply_markup=kb)

@router.message(F.text == "–†–µ—Ñ–µ—Ä–∞–ª—ã")
async def referrals_command(message: Message, bot: Bot):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    user = await get_user(message.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="referrals_list")]
    ])
    await message.answer(
        f"–†–µ—Ñ–µ—Ä–∞–ª—ã:\n–í—Å–µ–≥–æ: {user['referrals_count']}\n–ó–∞—Ä–∞–±–æ—Ç–æ–∫: {user['earnings']}$",
        reply_markup=kb
    )

@router.callback_query(F.data == "referrals_list")
async def referrals_list_command(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
            SELECT u.id, u.created_at
            FROM referrals r JOIN users u ON r.user_id = u.id
            WHERE r.ref_user_id = ?
        """, (user_id,))
        referrals = await cursor.fetchall()
    
    is_admin = user_id == ADMIN_ID
    if not referrals:
        await callback.message.delete()
        await callback.message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.",
            reply_markup=get_main_menu(is_admin)
        )
        return
    
    text = "–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\n"
    for ref in referrals:
        ref_id, created_at = ref
        text += f"–Æ–∑–µ—Ä {ref_id}, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {created_at}\n"
    
    await callback.message.delete()
    await callback.message.answer(text, reply_markup=get_main_menu(is_admin))
    await callback.answer()

@router.message(Command("admin"))
@router.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_command(message: Message, bot: Bot, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_promocode")],
        [InlineKeyboardButton(text="–°–∫–∏–¥–∫–∏", callback_data="discounts")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)
    await state.set_state(AdminStates.MAIN)

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    is_admin = user_id == ADMIN_ID
    await callback.message.delete()
    await callback.message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—â–Ω—ã–π —à–æ–ø –æ—Ç DROPZONE! üöÄ",
        reply_markup=get_main_menu(is_admin)
    )
    await state.set_state(UserStates.MAIN_MENU)
    await callback.answer()

def register_handlers(dp: Dispatcher):
    dp.include_router(router)