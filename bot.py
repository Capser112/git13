from aiogram import Dispatcher, F, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db import get_user, add_user, get_purchases_count, get_cart_items, DB_PATH
from config import CHANNEL_ID, CHAT_ID, CHANNEL_INVITE, CHAT_INVITE, ADMIN_ID
from aiogram import Bot
from payments import send_payment_request, check_invoice
import aiosqlite
import logging

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    MAIN_MENU = State()

class CartStates(StatesGroup):
    VIEW = State()
    SELECT_ITEM = State()

async def check_subscription(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç"""
    try:
        channel_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        chat_member = await bot.get_chat_member(CHAT_ID, user_id)
        return channel_member.status != "left" and chat_member.status != "left"
    except Exception as e:
        logging.error(f"Error checking subscription: {e}")
        return False

def get_main_menu(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    kb = [
        [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")]
    ]
    if is_admin:
        kb.append([KeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_subscription_keyboard() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_INVITE)],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç", url=CHAT_INVITE)],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])
    return kb

@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(bot, user_id):
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é–∑–µ—Ä–∞
    ref_id = None
    if len(message.text.split()) > 1 and message.text.split()[1].startswith("ref_"):
        ref_id = int(message.text.split()[1].replace("ref_", ""))
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                "INSERT OR IGNORE INTO referrals (user_id, ref_user_id) VALUES (?, ?)",
                (user_id, ref_id)
            )
            await db.commit()
    
    if not await get_user(user_id):
        await add_user(user_id, ref_id)
    
    is_admin = user_id == ADMIN_ID
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Ç—Ä–∞—Ñ–∏–∫–∞! üöÄ",
        reply_markup=get_main_menu(is_admin)
    )
    await state.set_state(UserStates.MAIN_MENU)

@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
    else:
        await callback.message.edit_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Ç—Ä–∞—Ñ–∏–∫–∞! üöÄ",
            reply_markup=get_main_menu()
        )
        await state.set_state(UserStates.MAIN_MENU)
        await callback.answer()

@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu()
        )
        await state.set_state(UserStates.MAIN_MENU)
        await callback.answer()
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_INVITE)],
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç", url=CHAT_INVITE)],
            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        await callback.answer(
            "–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            show_alert=True
        )
        await callback.message.edit_text(
            "–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
            reply_markup=kb
        )

@router.callback_query(F.data.startswith("buy_product_"))
async def buy_product(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    product_id = int(callback.data.split("_")[-1])
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id, price FROM products WHERE id = ?", (product_id,))
        product = await cursor.fetchone()
        if product:
            product_id, amount_usd = product
            user = await get_user(user_id)
            discount = user['discount'] if user else 0
            amount_usd = amount_usd * (1 - discount / 100)
            invoice_id = await send_payment_request(bot, user_id, product_id, amount_usd)
            if invoice_id:
                await callback.answer("–ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ.")
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@router.callback_query(F.data.startswith("pay_item_"))
async def pay_item(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    product_id = int(callback.data.split("_")[-1])
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id, price FROM products WHERE id = ?", (product_id,))
        product = await cursor.fetchone()
        if product:
            product_id, amount_usd = product
            user = await get_user(user_id)
            discount = user['discount'] if user else 0
            amount_usd = amount_usd * (1 - discount / 100)
            invoice_id = await send_payment_request(bot, user_id, product_id, amount_usd)
            if invoice_id:
                await callback.answer("–ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ.")
                await remove_from_cart(user_id, product_id)  # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    invoice_id = callback.data.split("_")[-1]
    
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    if await check_invoice(invoice_id):
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT payload FROM invoices WHERE invoice_id = ?", (invoice_id,))
            invoice = await cursor.fetchone()
            if invoice:
                payload = invoice[0].split("_")
                product_id = int(payload[-1]) if payload[-1] != "0" else 0
                is_admin = user_id == ADMIN_ID
                
                if product_id == 0:  # –û–ø–ª–∞—Ç–∞ –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω—ã
                    cursor = await db.execute("""
                        SELECT p.id, p.name, p.delivery_file, p.price
                        FROM cart c JOIN products p ON c.product_id = p.id
                        WHERE c.user_id = ?
                    """, (user_id,))
                    cart_items = await cursor.fetchall()
                    if not cart_items:
                        await callback.message.delete()
                        await callback.message.answer(
                            "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                            reply_markup=get_main_menu(is_admin)
                        )
                        await callback.answer("–û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
                        return
                    
                    text = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n"
                    user = await get_user(user_id)
                    total = 0
                    for item in cart_items:
                        _, name, delivery_file, price = item
                        if user["discount"]:
                            price = price * (1 - user["discount"] / 100)
                        total += price
                        text += f"{name}: {delivery_file}\n"
                        await db.execute(
                            "INSERT INTO orders (user_id, product_id, amount, currency, status) VALUES (?, ?, ?, ?, ?)",
                            (user_id, item[0], price, "USD", "completed")
                        )
                    if user["ref_id"]:
                        ref_earnings = total * 0.1
                        await db.execute(
                            "UPDATE referrals SET earnings = earnings + ? WHERE user_id = ? AND ref_user_id = ?",
                            (ref_earnings, user_id, user["ref_id"])
                        )
                        await db.execute(
                            "UPDATE users SET balance = balance + ? WHERE id = ?",
                            (ref_earnings, user["ref_id"])
                        )
                    await clear_cart(user_id)
                    await db.commit()
                    await bot.send_message(
                        ADMIN_ID,
                        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! –Æ–∑–µ—Ä {user_id} –æ–ø–ª–∞—Ç–∏–ª –∫–æ—Ä–∑–∏–Ω—É –Ω–∞ {total}$"
                    )
                    await callback.message.delete()
                    await callback.message.answer(text, reply_markup=get_main_menu(is_admin))
                    await callback.answer("–¢–æ–≤–∞—Ä—ã –≤—ã–¥–∞–Ω—ã!")
                
                else:  # –û–ø–ª–∞—Ç–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    cursor = await db.execute(
                        "SELECT delivery_file, price FROM products WHERE id = ?",
                        (product_id,)
                    )
                    product = await cursor.fetchone()
                    if product:
                        delivery_file, price = product
                        user = await get_user(user_id)
                        if user["discount"]:
                            price = price * (1 - user["discount"] / 100)
                        await callback.message.delete()
                        await callback.message.answer(
                            f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –¢–≤–æ–π —Ç–æ–≤–∞—Ä: {delivery_file}",
                            reply_markup=get_main_menu(is_admin)
                        )
                        await db.execute(
                            "INSERT INTO orders (user_id, product_id, amount, currency, status) VALUES (?, ?, ?, ?, ?)",
                            (user_id, product_id, price, "USD", "completed")
                        )
                        if user["ref_id"]:
                            ref_earnings = price * 0.1
                            await db.execute(
                                "UPDATE referrals SET earnings = earnings + ? WHERE user_id = ? AND ref_user_id = ?",
                                (ref_earnings, user_id, user["ref_id"])
                            )
                            await db.execute(
                                "UPDATE users SET balance = balance + ? WHERE id = ?",
                                (ref_earnings, user["ref_id"])
                            )
                        await db.commit()
                        await bot.send_message(
                            ADMIN_ID,
                            f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! –Æ–∑–µ—Ä {user_id} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä #{product_id} –∑–∞ {price}$"
                        )
                        await callback.answer("–¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω!")
                    else:
                        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            else:
                await callback.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    else:
        await callback.answer("–û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", show_alert=True)

@router.message(Command("catalog"))
@router.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def catalog_command(message: Message, bot: Bot):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id, name, desc, price, category FROM products")
        products = await cursor.fetchall()
    
    if not products:
        is_admin = message.from_user.id == ADMIN_ID
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.", reply_markup=get_main_menu(is_admin))
        return
    
    user = await get_user(message.from_user.id)
    discount = user['discount'] if user else 0
    for product in products:
        product_id, name, desc, price, category = product
        final_price = price * (1 - discount / 100)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å: {final_price}$", callback_data=f"buy_product_{product_id}")],
            [InlineKeyboardButton(text="–í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")]
        ])
        await message.answer(
            f"*{name}*\n\n{desc}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–¶–µ–Ω–∞: {final_price}$",
            reply_markup=kb
        )

@router.message(Command("profile"))
@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_command(message: Message, bot: Bot):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    user = await get_user(message.from_user.id)
    if not user:
        is_admin = message.from_user.id == ADMIN_ID
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu(is_admin))
        return
    
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    ref_link = f"t.me/{(await bot.get_me()).username}?start=ref_{message.from_user.id}"
    purchases_count = await get_purchases_count(message.from_user.id)
    is_admin = message.from_user.id == ADMIN_ID
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="top_up")],
        [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promocode")],
        [InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")],
        [InlineKeyboardButton(text="–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals_list")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await message.answer(
        f"*–ü—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"–ò–º—è: @{username}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['balance']}$\n"
        f"–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {user['discount']}% (–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Å–∫–∏–¥–∫–∏)\n"
        f"–ü–æ–∫—É–ø–æ–∫: {purchases_count}\n\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user['referrals_count']}\n"
        f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö: {user['earnings']}$",
        reply_markup=kb
    )

@router.message(Command("cart"))
@router.message(F.text == "–ö–æ—Ä–∑–∏–Ω–∞")
async def cart_command(message: Message, bot: Bot, state: FSMContext):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    cart_items = await get_cart_items(message.from_user.id)
    if not cart_items:
        is_admin = message.from_user.id == ADMIN_ID
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_menu(is_admin))
        return
    
    text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    kb_buttons = []
    user = await get_user(message.from_user.id)
    discount = user['discount'] if user else 0
    for item in cart_items:
        product_id, name, price = item
        final_price = price * (1 - discount / 100)
        text += f"{name} = {final_price}$\n"
        total += final_price
        kb_buttons.append([
            InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_item_{product_id}"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_item_{product_id}")
        ])
    
    text += f"\n–ò—Ç–æ–≥–æ: {total}$"
    kb_buttons.extend([
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –≤—Å—é", callback_data="pay_all")],
        [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é", callback_data="clear_cart")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    await message.answer(text, reply_markup=kb)
    await state.set_state(CartStates.VIEW)

@router.message(Command("help"))
@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def support_command(message: Message, bot: Bot):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º", url="t.me/+your_admin_chat")],
        [InlineKeyboardButton(text="FAQ", callback_data="faq")]
    ])
    await message.answer("–ö–∞–∫ –º–æ–∂–µ–º –ø–æ–º–æ—á—å?", reply_markup=kb)

@router.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_command(message: Message, bot: Bot, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_promocode")],
        [InlineKeyboardButton(text="–°–∫–∏–¥–∫–∏", callback_data="discounts")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)
    await state.set_state(AdminStates.MAIN)

@router.message(F.text == "–†–µ—Ñ–µ—Ä–∞–ª—ã")
async def referrals_command(message: Message, bot: Bot):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    user = await get_user(message.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="referrals_list")]
    ])
    await message.answer(
        f"–†–µ—Ñ–µ—Ä–∞–ª—ã:\n–í—Å–µ–≥–æ: {user['referrals_count']}\n–ó–∞—Ä–∞–±–æ—Ç–æ–∫: {user['earnings']}$",
        reply_markup=kb
    )

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    is_admin = user_id == ADMIN_ID
    await callback.message.delete()
    await callback.message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—â–Ω—ã–π —à–æ–ø –æ—Ç DROPZONE! üöÄ",
        reply_markup=get_main_menu(is_admin)
    )
    await state.set_state(UserStates.MAIN_MENU)
    await callback.answer()

@router.callback_query(F.data == "referrals_list")
async def referrals_list_command(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
            SELECT u.id, u.created_at
            FROM referrals r JOIN users u ON r.user_id = u.id
            WHERE r.ref_user_id = ?
        """, (user_id,))
        referrals = await cursor.fetchall()
    
    is_admin = user_id == ADMIN_ID
    if not referrals:
        await callback.message.delete()
        await callback.message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.",
            reply_markup=get_main_menu(is_admin)
        )
        return
    
    text = "–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\n"
    for ref in referrals:
        ref_id, created_at = ref
        text += f"–Æ–∑–µ—Ä {ref_id}, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {created_at}\n"
    
    await callback.message.delete()
    await callback.message.answer(text, reply_markup=get_main_menu(is_admin))
    await callback.answer()

def register_handlers(dp: Dispatcher):
    dp.include_router(router)