from aiogram import Dispatcher, F, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db import get_user, add_user, get_purchases_count, get_cart_items, DB_PATH
from config import CHANNEL_ID, CHAT_ID, CHANNEL_INVITE, CHAT_INVITE, ADMIN_ID
from aiogram import Bot
from payments import send_payment_request, check_invoice
import aiosqlite
import logging

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    MAIN_MENU = State()

class CartStates(StatesGroup):
    VIEW = State()
    SELECT_ITEM = State()

async def check_subscription(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç"""
    try:
        channel_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        chat_member = await bot.get_chat_member(CHAT_ID, user_id)
        return channel_member.status != "left" and chat_member.status != "left"
    except Exception as e:
        logging.error(f"Error checking subscription: {e}")
        return False

def get_main_menu() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    kb = [
        [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_subscription_keyboard() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_INVITE)],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç", url=CHAT_INVITE)],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])
    return kb

@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(bot, user_id):
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é–∑–µ—Ä–∞
    ref_id = message.text.split()[-1] if len(message.text.split()) > 1 else None
    if not await get_user(user_id):
        await add_user(user_id, ref_id)
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Ç—Ä–∞—Ñ–∏–∫–∞! üöÄ",
        reply_markup=get_main_menu()
    )
    await state.set_state(UserStates.MAIN_MENU)

@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
    else:
        await callback.message.edit_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Ç—Ä–∞—Ñ–∏–∫–∞! üöÄ",
            reply_markup=get_main_menu()
        )
        await state.set_state(UserStates.MAIN_MENU)
        await callback.answer()

@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu()
        )
        await state.set_state(UserStates.MAIN_MENU)
        await callback.answer()
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_INVITE)],
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç", url=CHAT_INVITE)],
            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        await callback.answer(
            "–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            show_alert=True
        )
        await callback.message.edit_text(
            "–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
            reply_markup=kb
        )

@router.callback_query(F.data.startswith("buy_product_"))
async def buy_product(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    product_id = int(callback.data.split("_")[-1])
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id, price FROM products WHERE id = ?", (product_id,))
        product = await cursor.fetchone()
        if product:
            product_id, amount_usd = product
            invoice_id = await send_payment_request(bot, user_id, product_id, amount_usd)
            if invoice_id:
                await callback.answer("–ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ.")
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    invoice_id = callback.data.split("_")[-1]
    
    if not await check_subscription(bot, user_id):
        await callback.message.edit_text(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
        return
    
    if await check_invoice(invoice_id):
        product_id = int(callback.data.split("_")[-2])  # –ò–∑ payload: user_id_product_id
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT delivery_file, price FROM products WHERE id = ?", (product_id,))
            product = await cursor.fetchone()
            if product:
                delivery_file, price = product
                await callback.message.edit_text(
                    f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –¢–≤–æ–π —Ç–æ–≤–∞—Ä: {delivery_file}",
                    reply_markup=get_main_menu()
                )
                await db.execute(
                    "INSERT INTO orders (user_id, product_id, amount, currency, status) VALUES (?, ?, ?, ?, ?)",
                    (user_id, product_id, price, "USD", "completed")
                )
                await db.commit()
                await bot.send_message(
                    ADMIN_ID,
                    f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! –Æ–∑–µ—Ä {user_id} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä #{product_id} –∑–∞ {price}$"
                )
        await callback.answer("–¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω!")
    else:
        await callback.answer("–û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", show_alert=True)

@router.message(Command("catalog"))
async def catalog_command(message: Message, bot: Bot):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id, name, desc, price, category FROM products")
        products = await cursor.fetchall()
    
    if not products:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.", reply_markup=get_main_menu())
        return
    
    for product in products:
        product_id, name, desc, price, category = product
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å: {price}$", callback_data=f"buy_product_{product_id}")],
            [InlineKeyboardButton(text="–í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")]
        ])
        await message.answer(
            f"*{name}*\n\n{desc}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–¶–µ–Ω–∞: {price}$",
            reply_markup=kb
        )

@router.message(Command("profile"))
async def profile_command(message: Message, bot: Bot):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    user = await get_user(message.from_user.id)
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    ref_link = f"t.me/{(await bot.get_me()).username}?start=ref_{message.from_user.id}"
    purchases_count = await get_purchases_count(message.from_user.id)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="top_up")],
        [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promocode")],
        [InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await message.answer(
        f"*–ü—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"–ò–º—è: @{username}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['balance']}$\n"
        f"–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: 0%\n"
        f"–ü–æ–∫—É–ø–æ–∫: {purchases_count}\n\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user['referrals_count']}\n"
        f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö: {user['earnings']}$",
        reply_markup=kb
    )

@router.message(Command("cart"))
async def cart_command(message: Message, bot: Bot, state: FSMContext):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    cart_items = await get_cart_items(message.from_user.id)
    if not cart_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_menu())
        return
    
    text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    kb_buttons = []
    for item in cart_items:
        product_id, name, price = item
        text += f"{name} = {price}$\n"
        kb_buttons.append([
            InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_item_{product_id}"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_item_{product_id}")
        ])
    
    kb_buttons.extend([
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –≤—Å—é", callback_data="pay_all")],
        [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é", callback_data="clear_cart")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    await message.answer(text, reply_markup=kb)
    await state.set_state(CartStates.VIEW)

@router.message(Command("help"))
async def support_command(message: Message, bot: Bot):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º", callback_data="chat_admin")],
        [InlineKeyboardButton(text="FAQ", callback_data="faq")]
    ])
    await message.answer("–ö–∞–∫ –º–æ–∂–µ–º –ø–æ–º–æ—á—å?", reply_markup=kb)

@router.message(F.text == "–†–µ—Ñ–µ—Ä–∞–ª—ã")
async def referrals_command(message: Message, bot: Bot):
    if not await check_subscription(bot, message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    user = await get_user(message.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="referrals_list")]
    ])
    await message.answer(
        f"–†–µ—Ñ–µ—Ä–∞–ª—ã:\n–í—Å–µ–≥–æ: {user['referrals_count']}\n–ó–∞—Ä–∞–±–æ—Ç–æ–∫: {user['earnings']}$",
        reply_markup=kb
    )

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Ç—Ä–∞—Ñ–∏–∫–∞! üöÄ",
        reply_markup=get_main_menu()
    )
    await state.set_state(UserStates.MAIN_MENU)
    await callback.answer()

def register_handlers(dp: Dispatcher):
    dp.include_router(router)